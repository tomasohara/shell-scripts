# Workflow for running locally (e.g., via https://github.com/nektos/act)
#
# Note:
# - Invoked via local-workflows.sh:
#     WORKFLOW_FILE=act.yml local-workflow.sh ...
# - This leads to the following type of invocation:
#     act --container-architecture linux/amd64 --pull="false" -P "ubuntu-latest=local/test-act" -W ./.github/workflows/act.yml
# - Based initially on tests.yml from Python mezcla package.
# - Requires special permission for Github workflows.
# - For more information see following:
#     https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
#     https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# - Based initially on version from https://github.com/LimaBD/batspp.
# - Running Github Actions with Docker: https://stackoverflow.com/a/64373702
# - Docker documentation:
#   https://docs.docker.com/engine/reference/commandline/cli/
#   https://docs.docker.com/storage/bind-mounts
#
# Warning:
# - *** Changes need to be synchronized in 3 places: Dockerfile, local-workflow.sh, and .github/workflow/*.yml!
# - It can be tedious to diagnose subtle errors in the yaml specification, especially
#   because the workflow syntax takes a little liberty. In addition to yamllint,
#   Try the actionlint utility:
#       https://github.com/rhysd/actionlint
#

name: Act-Tests

on: [push, pull_request]

jobs:
  build:
    name: Build and Run Tests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        ## TODO: os: [ubuntu-20.04, ubuntu-latest]
        os: [ubuntu-20.04]
        ## TODO: python-version: ["3.8", "3.9", "3.10"]
        ## NOTE: only uses one version due to time to run tests locally
        python-version: ["3.9"]

    ## TEST:
    ## NOTE: following is for docker images on the hub
    ## container:
    ##   image: shell-scripts-dev
    ##   options: --user=root

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build docker image
        run: |
          docker build --tag shell-scripts-dev -f- . <Dockerfile

      - name: Configure Environment
        ## TODO2: clarify why used
        ## See https://stackoverflow.com/questions/57968497/how-do-i-set-an-env-var-with-a-bash-expression-in-github-actions
        run: |
          echo "PATH=$PATH" >> "$GITHUB_ENV"
          echo "PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.9/dist-packages" >> "$GITHUB_ENV"

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          # Note: command format: docker run [OPTIONS] IMAGE [COMMAND] [ARG...];
          # The environment file normally has no entries (i.e., just comments).
          docker run --env-file _temp-user-docker.env --rm --mount type=bind,source="$(pwd)",target=/home/shell-scripts shell-scripts-dev
