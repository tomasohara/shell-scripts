Adhoc tests

*** WARNING: ***
- The tests can be very dangerous, leading to deleted directories in some cases.
- Run them under a separate test account with minimal permission to be safe.
- TODO: Weed out usage of "rm -r ./*" (instead delete before and after from command line)!
  -- Problematic as current directory might be different.
  -- See Tom's changes to dir-aliases-test-revised.ipynb (circa 17 Jul 23).

TIPS:
- ** A drawback with Jupyter based tests is that the output might be generated
  to reflecting the current alias but not capturing the tester's intention.
  To make sure the tests capture the critical aspects of the aliases, etc.,
  post-processing can be important. For example, to check the expected output
  of the date command, it would be best to use pattern matching to verify a
  specific format rather than output normalization:
     $ date | grep --perl-regexp --count --ignore-case '^[A-Z]{3}.*[0-9]{4}$'
     1
  This is better than outputting encoded output such as "AAA AAA DD DD:DD:DD AAA DDDD", because the date output format might change.
- * Use '# Global Setup' comments to flag setup sections for entire test files
- Put expected output comment before the command (Batspp quirk).
- For examples of both, see Tom's changes to trace-python-commands.ipynb (circa 17 Aug 23).

COMMON ISSUES:
- Files without newlines: this causes issue with diff, which is a common with printf gotcha.
  resolution: printf "Line 1" => printf "Line1\n"
  note: in general uses echo instead of printf

TERMINOLOGY:
- tests, testfiles = .ipynb files
- batspp = batspp library that uses bats-core
- batspp files = .batspp files (generated from jupyter_to_batspp.py)
- bats = Bash Automation Testing Script
- bats files = .bats files (generated from batspp library or ../simple_batspp.py)
- acc. = according
- ZNZP = Zero/NonZero Pipeline (for conditional)

TODO:
- Add non-trivial tests as separate scripts.
- Add simple tests to scripts themselves (e.g., via EX comments as in disambiguate-parses.perl).

BUGS:
- batspp_report.py fails on first execution.
- jupyter_to_batspp.py supports mezcla != 1.3.6

PREREQUISITES:
- bash_kernel (https://pypi.org/project/bash_kernel/)
- bats-core (https://github.com/bats-core/bats-core)
- batspp (https://pypi.org/project/batspp/)
- kcov (https://github.com/SimonKagstrom/kcov)
- mezcla (https://pypi.org/project/mezcla/)
- notebook (https://pypi.org/project/notebook/)


INFO:
- Tests written in Jupyter Notebooks (.ipynb)
- Tests with "NOBATSPP" suffix ignored by default (-a option in batspp_report.py removes the restriction)
- batspp_report.py generates reports  
- kcov_result.py creates summary statistics for kcov (HTML based) report generated by batspp_report.py
- summary_stats.bash automates the process of detection, generation and summarization of testfiles (output = summary_stats.txt)
- Scripts are well documented (use -h option)

WORKFLOW:
- jupyter_to_batspp.py converts testfiles to batspp files (.ipynb -> .batspp)
- batspp_report.py executes batspp files and stores them as bats files:
	- n = No reports generated
	- k = KCOV reports generated
	- t = txt based reports
	- a = includes all available testfiles
	- s = uses batspp library (default = ../simple_batspp.py)
- kcov_result.py summarizes the test results using KCOV files generated from batspp_report.py:
	- export = generates individual test coverage info (format = NN out of NN tests passed overall (NN.NN%)
	- summary = prints summary only
	- ro = prints individual reports only
	- list = prints list of testfiles acc. to success rate (in desc.)
	- include = only include the tests mentioned
	- exclude = excludes tests mentioned
- summary_stats.bash automates entire process mentioned above (output = summary_stats.txt) 

DIRECTORIES:
- bats-only/ = .bats file storage (result of batspp or ../simple_batspp.py)
- batspp-only/ = .batspp file storage (result of ./jupyter_to_batspp.py)
- coverage-reports/ = individual test coverage info storage (result of ./kcov_result.py --export)
- kcov-output/ = KCOV reports storage generated from batsfile (result of ./batspp_report.py -k)
- temp/, tmp/ = Temporary storage for testfiles
- txt-reports/ = .txt report storage (result of ./batspp_report.py -t)

