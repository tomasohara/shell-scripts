## SETUP (OPTIONAL - USE IF REQUIRED)
## Bracketed Paste is disabled to prevent characters after output
## Example: 
## $ echo 'Hii'
## | Hi?2004l
# bind 'set enable-bracketed-paste off'

## TEST:  Make sure simple prompt used (e.g., no escapes that might contaminate output)
## PS1="$ "
## TODO: PS1="> "
## NOTE: The Jupyter bash kernel requires that PS1 not be modified as they customize it. 
$ echo $PS1
[PEXP\[\]ECT_PROMPT>

# Delete all aliases and function
# TODO: Instead start from pristine environment
$ unalias -a
$ alias | wc -l
$ for f in $(typeset -f | egrep '^\w+'); do unset -f $f; done
$ typeset -f | egrep '^\w+' | wc -l
0
0

# Setting a temp directory for tests
$ TMP=/tmp/test-linewords
## NOTE: Source it directly from the ./tests directory.
$ BIN_DIR=$PWD/..
$ alias | wc -l
0

## NOTE: For reproducability, the directory name needs to be fixed
## In place of $$, use a psuedo random number (e,g., 6439)
## *** All output from one run to the next needs to be the same ***
## temp_dir=$TMP/test-$$
$ temp_dir=$TMP/test-6439
$ mkdir -p "$temp_dir"
# TODO: /bin/rm -rvf "$temp_dir"
$ cd "$temp_dir"
$ pwd
#ALIAS FOR PRINTING SEPERATION LINES (FOR JUPYTER)
$ alias linebr="printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -"
/tmp/test-linewords/test-6439

# Count aliases proper
$ alias | wc -l
# Count functions
$ typeset -f | egrep '^\w+' | wc -l
1
0

$ alias testnum="sed -r "s/[0-9]/N/g"" 
$ alias testuser="sed -r "s/"$USER"+/userxf333/g"" 

$ source $BIN_DIR/tomohara-aliases.bash

# GENERATES A PARAGRAPH WITH MULTIPLE LINES
$ rm -rf ./*
$ printf "Hi Mom,\nThis is the use of printf\nI can use a backslash n to start a new line\n1\n2\n3" >> abc-test.txt
$ printf "This is another-test file" >> test2.txt
$ printf "This is test-file 3" >> test3.txt
$ printf "This is a test-file 4" >> test4.txt

$ ls | count-it '\.([^\.]+)$'
txt	4

# line-wc | COUNTS WORD FOR EACH LINE
$ cat abc-test.txt | line-wc
2	Hi Mom,
6	This is the use of printf
11	I can use a backslash n to start a new line
1	1
1	2
1	3

# line-len | COUNTS CHARACTERS FOR EACH LINE
$ cat abc-test.txt | line-len
7	Hi Mom,
25	This is the use of printf
43	I can use a backslash n to start a new line
1	1
1	2
0	3

# para-len | COUNTS CHARACTERS FOR EACH PARAGRAPH
$ cat abc-test.txt | para-len
82	Hi Mom,
This is the use of printf
I can use a backslash n to start a new line
1
2
3

# line-word-len | COUNTS WORDS FOR EACH LINE
$ cat abc-test.txt | line-word-len
2	Hi Mom,
6	This is the use of printf
11	I can use a backslash n to start a new line
1	1
1	2
1	3

## PROCESS DOESN'T END FOR ls-line-len
## EXAMPLE: 
## $ls-line-len
## |12      abc-test.txt1h=
$ ls-line-len
[?1h=






















[H[2J[H[H[2J[H12      abc-test.txt
9       test4.txt
9       test3.txt
9       test2.txt
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[1m~[0m
[K[?1l>

# ## ERROR-GENERATED : check-class-dist
# $ cat abc-test.txt | check-class-dist
# | Can't open : No such file or directory at /home/xaea12/bin/count_it.perl line 171.
# | WARNING: unexpected distribution for FREQ (all 0)

# $ cat abc-test.txt | 2bib
# | bash: bibitem2bib: command not found
# | cat: write error: Broken pipe

$ rm -rf ./* > /dev/null
$ echo "Done"
Done
